"""
Django settings for kooplex project.
"""

from os import path

PROJECT_ROOT = path.dirname(path.abspath(path.dirname(__file__)))

DEBUG = True

ALLOWED_HOSTS = (
    'localhost',
)

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'kooplex',
        'USER': 'kooplex',
        'PASSWORD': '******',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

KOOPLEX_EXTERNAL_HOST = 'kooplex.org'
KOOPLEX_BASE_URL = 'http://' + KOOPLEX_EXTERNAL_HOST
KOOPLEX_HUB_PREFIX = 'hub'

KOOPLEX = {
    'hub': {
    },
    'users': {
        'srv_dir': '/srv/kooplex',
        'home_dir': 'home/{$username}',
    },
    'ldap': {
        'host': '192.168.137.100',
        'port': 666,
        'base_dn': 'dc=kooplex,dc=org',
        'bind_username': 'admin',
        'bind_password': '******',
    },
    'gitlab': {
        'base_url': 'http://%s/gitlab/' % KOOPLEX_EXTERNAL_HOST,
        'ssh_cmd': r'/bin/ssh',
        'ssh_host': 'localhost',
        'ssh_port': 23,
        'admin_username': 'gitlabadmin',
        'admin_password': '******',
        'ssh_key_password': '******'
    },
    'docker': {
        'host': 'localhost',
        'port': 5555,
        'network': 'kooplex-net',
    },
    'spawner': {
        'notebook_container_name': 'kooplex-notebook-{$username}',
        'notebook_ip_pool': ['172.20.20.1', '172.20.20.255'],
        'srv_path': '/srv/kooplex'
    },
    'proxy': {
        'host': KOOPLEX_EXTERNAL_HOST,
        'port': 8001,   # api port
        'auth_token': '******',
        'external_url': 'http://%s/' % KOOPLEX_EXTERNAL_HOST,
    }
}

# AllAuth authentication backend
TEMPLATES =  [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
         #'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',

                # `allauth` needs this from django
                # 'django.template.context_processors.request',

                'kooplex.lib.extra_context.extra_context',
                
            ],
            'debug': DEBUG,
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                #     'django.template.loaders.eggs.Loader',
            ]
        },
    },
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'kooplex.lib.auth.Auth',
)

# LOGIN_URL = '/accounts/login'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = path.join(PROJECT_ROOT, 'static').replace('\\', '/')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'n(bd1f1c%e8=_xad02x5qtfn%wgwpi492e$8_erx+d)!tpeoim'

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'threadlocals.middleware.ThreadLocalMiddleware',

    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # For oaut2 provider
    #'corsheaders.middleware.CorsMiddleware', 
)

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'kooplex.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'kooplex.wsgi.application'

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    'django.contrib.admindocs',

    # AllAuth
    #'allauth',
    #'allauth.account',
    #'allauth.socialaccount',
    #'allauth.socialaccount.providers.gitlab',

    # OAuth2 provider
    #'corsheaders',
    #'oauth2_provider',

    'kooplex.hub.apps.HubConfig',
)

# Required by oauth2 provider
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.ext.rest_framework.OAuth2Authentication',
    )
}

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

# Specify the default test runner.
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
