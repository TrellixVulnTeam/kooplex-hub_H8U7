import os.path
import json
from django.db import models
from shutil import copyfile as cp
from os import mkdir
from distutils import dir_util, file_util

from .modelbase import ModelBase
from .project import Project
from .notebook import Notebook
from .dashboard_server import Dashboard_server

from kooplex.lib.smartdocker import Docker
from kooplex.lib.libbase import get_settings

class Report(models.Model, ModelBase):
    id = models.AutoField(primary_key=True)
    project = models.ForeignKey(Project, null=True)
    type = models.CharField(max_length=15)                            #TODO: should be a selection of html/dashboard
    dashboard_server = models.ForeignKey(Dashboard_server, null=True, on_delete=models.SET_NULL)
    name = models.CharField(max_length=200, null=True)
    file_name = models.CharField(max_length=200, null=True)
    creator_name = models.CharField(max_length=200, null=True)
    scope = models.CharField(max_length = 16, null = True)
    path = models.CharField(max_length=200, null=True)                #FIXME: used?
    url = models.CharField(max_length=200, null=True)                 #FIXME: let is be autogenerated when requested
    cache_url = models.CharField(max_length=200, null=True)           #FIXME: let is be autogenerated when requested, applies only to dashboard
    binds = models.TextField(null=True)                               #FIXME: used?
#FIXME: image type should be a property, project may change image any time
#TODO: add timestamp field

    wd = '_report'

    class Meta:
        db_table = "kooplex_hub_report"

    def init(self, Dashboard_server, project, file="", type=""):
        self.path, self.file_name = os.path.split(file)
        self.name = os.path.splitext(self.file_name)[0]
        self.type = type
        self.dashboard_server = Dashboard_server
        self.project = project
        self.creator_name = self.project.owner_username

    @property
    def url_(self):
        if self.type == 'html':
            return "/hub/worksheetsopen?report_id=%d" %  (self.id)
        elif self.type == 'dashboard':
#FIXME: why dashboard here
            return os.path.join(self.dashboard_server.url, self.path, 'dashboards', self.project.home, self.name)
        else:
            assert False, "Unhandled type %s" % self.type

    @property
    def cache_url_(self):
        assert self.type == 'html', "Unhandled type %s" % self.type
        return os.path.join(self.dashboard_server.cache_url, self.path)

    @property
    def target_(self):
        if self.type == 'html':
            return os.path.join(get_settings('users', 'srv_dir', None, ''), self.wd, 'html', self.project.home)
        elif self.type == 'dashboard':
#FIXME: image type should be a property, project may change image any time
            return os.path.join(get_settings('users', 'srv_dir', None, ''), self.wd, self.project.image_, self.project.home)

    @property
    def entry_(self):
        return os.path.join(self.target_, self.file_name)

    def get_environment(self):
        return self.load_json(self.environment)

    def set_environment(self, value):
        self.environment = self.save_json(value)

    def get_binds(self):
        return self.load_json(self.binds)

    def set_binds(self, value):
        self.binds = self.save_json(value)

    def convert_to_html(self, notebook):
        docli = Docker()
        nb = os.path.join('home', self.project.owner_name, 'git', self.path, self.name)
        command = " jupyter-nbconvert --to html /%s.ipynb " % nb
        docli.exec_container(notebook, command, detach=False)


    def deploy(self, other_files):
        if self.type=='html':
            notebook = Notebook.objects.get(project_id = self.project.id, username = self.project.owner_username)
            self.convert_to_html(notebook)
            dir_util.mkpath(self.target_)
            self.file_name = os.path.splitext(self.file_name)[0] + ".html"
            file_to_deploy = os.path.join(self.project.gitdir_, self.path, self.file_name)
            file_to_create = os.path.join(self.target_, self.file_name)
            try:
                file_util.move_file(file_to_deploy, file_to_create)
            except:
                os.remove(file_to_deploy)
                raise

        elif self.type=='dashboard':
            ooops = []
            other_files.append(os.path.join(self.path, self.file_name))
            for file in other_files:
                file_to_deploy = os.path.join(self.project.gitdir_, self.path, file)
                file_to_create = os.path.join(self.target_, file)
                dir_util.mkpath(os.path.split(file_to_create)[0])
                try:
                    file_util.copy_file(file_to_deploy, file_to_create)
                except:
                    ooops.append(file)
            if len(ooops):
                raise Exception("Error copying files: %s" % ",".join(ooops))

    def remove(self):
#TODO: remove from filesystem
        self.delete()
